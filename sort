// Sorry for late upload in here, as I said in my email I had problems with github setup
// Also I found the problem in quicksort and improved merge
// Again, sorry for inconvenience

#include "stdafx.h"
#include <iostream>

int ascending(int a, int b) {return a>b;}
int descending(int a, int b) {return a<b;}

void swap(int *, int, int);
void print(int *, int);

void selection(int *, int, int(*)(int, int));
void bubble(int *, int, int(*)(int, int));
void insertion(int *, int, int(*)(int, int));
void merge(int *, int, int, int, int(*)(int, int));
void quick(int *, int, int, int(*)(int,int));

int _tmain(int argc, _TCHAR* argv[])

{
	int *a;
	int order,size;
	std::cin>>size;
	a = new int[size];
	for (int i=0; i<size; i++)
		std::cin>>a[i];

	std::cin>>order;
	if(order==1)
		//selection(a,size,ascending);
		//bubble(a,size,ascending);
		//insertion(a,size,ascending);
		//merge(a,0,size-1,1,ascending);
		quick(a,0,size-1,ascending);
	else
		//selection(a,size,descending);
		//bubble(a,size,descending);
		//insertion(a,size,descending);
		//merge(a,0,size-1,1,descending);
		quick(a,0,size-1,descending);
	print(a,size);
	delete a;
	return 0;
}

void selection(int *a, int size, int(*order) (int , int ))
{
	int t, m, i, j;
	for (j=0; j<size-1; j++)
	{
		m = a[0];
		t = 0;
		for (i=1; i<size-j; i++)
			if (order(a[i],m))
			{
				m = a[i];
				t = i;
			}
		swap(a,t,size-j-1);
	}
}

void bubble(int *a, int size, int(*order) (int, int))
{
	int ind = 0;
	while (ind == 0)
	{
		ind = 1;
		for (int j=0; j<size-1; j++)
		{
			if (order(a[j],a[j+1]))
			{
				swap(a,j,j+1);
				ind = 0;
			}
		}
	}
}

void insertion(int *a, int size, int(*order)(int, int))
{
	for (int i=1; i<size; i++)
	{
		for (int j=0; j<=i-1; j++)
			if (order(a[j],a[i]))
				swap(a,i,j);
	}
}

void merge(int *a, int f, int l, int mod, int(*order)(int, int))
{
	int m = (f+l)/2;
	if (mod == 1)
	{
		if (l - f >1)
		{
			//int m = f + (l + 1 -f)/2;
			merge(a,f,m,1,order);
			merge(a,m+1,l,1,order);
			merge(a,f,l,0,order);
		}
		else if ((l-f == 1) && (order(a[f],a[l])))
			swap(a,f,l);
	}
	else
	{
		int *a1, *a2, i, c1=0,c2=0;

		a1 = new int [m-f+1];
		a2 = new int [l-m];
		for (i=0; i<m-f+1; i++)
			a1[i] = a[f+i];
		for (i=0; i<l-m; i++)
			a2[i] = a[m+i+1];

		while ((c2<l-m) && (c1<m-f+1))
		{
			if(order(a1[c1],a2[c2]))
			{
				a[f+c1+c2] = a2[c2];
				c2++;
			}
			else
			{
				a[f+c1+c2] = a1[c1];
				c1++;
			}
		}

		if (c2<l-m)
			for (i=c2; i<l-m; i++)
				a[f+c1+i] = a2[i];

		if (c1<m-f+1)
			for (i=c1; i<m-f+1; i++)
				a[f+c2+i] = a1[i];

		delete a1, a2;
	}
}

void quick(int *a, int left, int right, int (*order)(int,int))
{
	int l=left+1, r=right;
	while (l <= r) 
	{
		while (order(a[left],a[l]))
			l++;
		while (order(a[r],a[left]))
			r--;
		if (l <= r)
		{
			swap(a,l,r);
			l++;
			r--;
		}
	}
	swap(a,left,r);
	if (left < r)
		quick(a,left,r-1,order);
	if (l < right)
		quick(a,l,right,order);
}

void swap(int *a, int i, int j)
{
	int temp = a[i];
	a[i] = a[j];
	a[j] = temp;
}

void print (int *a, int size)
{
	for (int i=0; i<size; i++)
		std::cout<<a[i]<<' ';
}
